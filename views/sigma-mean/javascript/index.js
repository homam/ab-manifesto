// Generated by LiveScript 1.3.0
(function(){
  var ref$, id, sqrt, div, abs, mean, sum, map, foldl, concatMap, minimum, maximum, each, fold, zip, zipWith, filter, find, sortBy, groupBy, objToPairs, head, tail, splitAt, join, zipAll, reverse, binomialDistributionList, draw;
  ref$ = require('prelude-ls'), id = ref$.id, sqrt = ref$.sqrt, div = ref$.div, abs = ref$.abs, mean = ref$.mean, sum = ref$.sum, id = ref$.id, map = ref$.map, foldl = ref$.foldl, concatMap = ref$.concatMap, minimum = ref$.minimum, maximum = ref$.maximum, each = ref$.each, fold = ref$.fold, zip = ref$.zip, zipWith = ref$.zipWith, filter = ref$.filter, find = ref$.find, sortBy = ref$.sortBy, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, head = ref$.head, tail = ref$.tail, splitAt = ref$.splitAt, join = ref$.join, zipAll = ref$.zipAll, reverse = ref$.reverse;
  window.actions = {};
  binomialDistributionList = function(n, p){
    var mu, sigma, distribution;
    mu = n * p;
    sigma = sqrt(n * p * (1 - p));
    return distribution = sortBy(function(arg$){
      var x;
      x = arg$.x;
      return abs(mu - x);
    })(
    map(function(arg$){
      var x, y;
      x = arg$[0], y = arg$[1];
      return {
        x: x,
        y: y
      };
    })(
    zip((function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = n; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()), binomialDistribution(n, p))));
  };
  draw = function($svg, n, p, distribution){
    var mu, sigma, width, height, margin, format, xs, ys, minXs, maxXs, ref$, fRangeXs, rangeXs, standardXs, rangeStandardXs, x, y, x$, $vp, y$, duration, extent, z$, z1$, z2$, z3$, z4$, z5$, z6$, z7$, z8$, yAxis, z9$, $yAxis, z10$, $block, z11$, z12$, z13$;
    mu = n * p;
    sigma = sqrt(n * p * (1 - p));
    width = $svg.node().offsetWidth;
    height = $svg.node().offsetHeight;
    margin = {
      top: 5,
      right: 10,
      bottom: 50,
      left: 40
    };
    width = width - margin.left - margin.right;
    height = height - margin.top - margin.bottom;
    format = d3.format(",");
    xs = map(function(it){
      return it.x;
    })(
    distribution);
    ys = [
      0, d3.max(map(function(it){
        return it.y;
      }, distribution))
    ];
    minXs = minimum(xs);
    maxXs = maximum(xs);
    ref$ = function(){
      var f, x;
      f = function(x){
        return (width / (maxXs - minXs)) * (x - minXs);
      };
      return [
        f, (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(f(x));
          }
          return results$;
        }())
      ];
    }(), fRangeXs = ref$[0], rangeXs = ref$[1];
    standardXs = [{
      d: 0,
      v: mu
    }].concat(function(){
      var partitions;
      partitions = 5 * p * n / sigma;
      return filter(function(arg$){
        var v;
        v = arg$.v;
        return v >= minXs && v <= maxXs;
      })(
      concatMap(function(i){
        return [
          {
            d: -1 * i,
            v: mu - i * sigma
          }, {
            d: i,
            v: mu + i * sigma
          }
        ];
      })(
      (function(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = partitions; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }())));
    }());
    rangeStandardXs = map(compose$(function(it){
      return it.v;
    }, fRangeXs))(
    standardXs);
    x = d3.scale.ordinal().domain(xs).range(rangeXs);
    x.rangeBand = function(){
      return width / rangeXs.length;
    };
    y = d3.scale.linear().domain(ys).range([height, 0]);
    x$ = $vp = $svg.selectAll('g.vp').data([distribution]);
    y$ = x$.enter().append('g').attr('class', 'vp');
    y$.append('g').attr('class', 'y axis');
    x$.attr('transform', "translate(" + margin.left + "," + margin.top + " )");
    duration = 200;
    extent = width / standardXs.length;
    standardXs = function(){
      return head(foldl(function(arg$, a){
        var acc, ref$, last, isNext, current;
        acc = arg$[0], ref$ = arg$[1], last = ref$[0], isNext = ref$[1];
        current = div(abs(fRangeXs(a.v) - fRangeXs(standardXs[0].v)), 40);
        a.showLabel = current > last || (isNext && (a.d === 0 || a.d * ((ref$ = acc[acc.length - 1]) != null ? ref$.d : void 8) < 0));
        return [acc.concat([a]), [current, current > last]];
      }, [[], [0, true]])(
      standardXs));
    }();
    z$ = $vp.selectAll('g.sdevtick').data(standardXs);
    z1$ = z$.enter().append('g').attr('class', 'sdevtick');
    z1$.attr('transform', function(it){
      return "translate(" + (2 * fRangeXs(it.v) - width) + "," + (height + 50 - margin.bottom) + ")";
    });
    z2$ = z1$.append('rect');
    z2$.attr('width', 2);
    z2$.attr('height', 10);
    z2$.attr('y', 0);
    z3$ = z1$.append('text').attr('class', 'sigma');
    z3$.attr('text-anchor', 'middle');
    z3$.attr('y', 30);
    z4$ = z1$.append('text').attr('class', 'value');
    z4$.attr('text-anchor', 'middle');
    z4$.attr('y', 50);
    z5$ = z$.select('.sigma');
    z5$.text(function(arg$){
      var d, showLabel;
      d = arg$.d, showLabel = arg$.showLabel;
      if (!showLabel) {
        return "";
      } else if (0 === d) {
        return "0";
      } else if (abs(d) > 1) {
        return d + " σ";
      } else if (d < 0) {
        return "- σ";
      } else {
        return "σ";
      }
    });
    z6$ = z$.select('.value');
    z6$.text(function(arg$){
      var d, showLabel;
      d = arg$.d, showLabel = arg$.showLabel;
      if (!showLabel) {
        return "";
      } else {
        return round(
        sigma * d + mu);
      }
    });
    z7$ = z$.exit().transition(duration);
    z7$.attr('transform', function(it){
      return "translate(" + (2 * fRangeXs(it.v) - width) + "," + (height + 50 - margin.bottom) + " )";
    });
    z7$.remove();
    z8$ = z$.transition().duration(duration);
    z8$.attr('transform', function(it){
      return "translate(" + fRangeXs(it.v) + "," + (height + 50 - margin.bottom) + ")";
    });
    yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(format).tickSize(-width, 0, 0).ticks(5);
    z9$ = $yAxis = $vp.select('.y.axis');
    z9$.transition().duration(duration).call(yAxis);
    z10$ = $block = $vp.selectAll('rect.block').data(id);
    z11$ = z10$.enter().append('rect').attr('class', 'block');
    z11$.attr('height', 0);
    z11$.attr('x', compose$(function(it){
      return it.x;
    }, x)).attr('y', function(){
      return y(0);
    });
    z12$ = z10$.exit().transition().duration(duration);
    z12$.attr('height', 0);
    z12$.attr('x', compose$(function(it){
      return it.x;
    }, x)).attr('y', function(){
      return y(0);
    });
    z12$.remove();
    z13$ = z10$.transition().duration(duration);
    z13$.attr('width', x.rangeBand()).attr('height', compose$(function(it){
      return it.y;
    }, y, (function(it){
      return height - it;
    })));
    z13$.attr('x', compose$(function(it){
      return it.x;
    }, x)).attr('y', compose$(function(it){
      return it.y;
    }, y));
    return z10$;
  };
  draw(d3.select('svg'), 500, 0.4, binomialDistributionList(500, 0.4));
  actions['draw-binomial-distribution-with-sigmas'] = function($parent){
    var n, p, zoom, mu, sigma, distribution;
    n = parseInt(
    $parent.find('[name=n]').val());
    p = parseFloat(
    $parent.find('[name=p]').val());
    zoom = $parent.find('[name=zoom]').get(0).checked;
    mu = n * p;
    sigma = sqrt(n * p * (1 - p));
    distribution = (!zoom
      ? id
      : filter(function(arg$){
        var x;
        x = arg$.x;
        return x >= mu - 6 * sigma && x <= mu + 6 * sigma;
      }))(
    binomialDistributionList(n, p));
    return draw(d3.select($parent.find('svg').get(0)), n, p, distribution);
  };
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
