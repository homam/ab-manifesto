// Generated by LiveScript 1.2.0
(function(){
  var ref$, mean, sum, id, map, fold, filter, groupBy, objToPairs, head, tail, splitAt, zipAll, maximum, minimum, sortBy, sort, exports, drawExperimentNTries, drawHistogramAxes, drawHistogram, drawPathDiagram, drawDoubleHistogram;
  ref$ = require('prelude-ls'), mean = ref$.mean, sum = ref$.sum, id = ref$.id, map = ref$.map, fold = ref$.fold, filter = ref$.filter, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, head = ref$.head, tail = ref$.tail, splitAt = ref$.splitAt, zipAll = ref$.zipAll, maximum = ref$.maximum, minimum = ref$.minimum, sortBy = ref$.sortBy, sort = ref$.sort;
  exports = exports != null ? exports : this;
  drawExperimentNTries = function($svg, data, arg$){
    var duration, ref$, width, height, xExtents, onTransitionStarted, onTransitionEnded, dlength, dgroups, margin, x$, x, y, nextY, $vp, $vpEnter, blockHeight, y$, $block, yAxis, z$, $yAxis, xAxis, z1$, $xAxis;
    duration = (ref$ = arg$.duration) != null ? ref$ : 1000, width = (ref$ = arg$.width) != null ? ref$ : 620, height = (ref$ = arg$.height) != null ? ref$ : 260, xExtents = (ref$ = arg$.xExtents) != null ? ref$ : null, onTransitionStarted = (ref$ = arg$.onTransitionStarted) != null ? ref$ : noop, onTransitionEnded = (ref$ = arg$.onTransitionEnded) != null ? ref$ : noop;
    dlength = data.length;
    dgroups = map(function(arg$){
      var key, arr;
      key = arg$[0], arr = arg$[1];
      return {
        key: +key,
        count: arr.length,
        prob: arr.length / dlength
      };
    })(
    objToPairs(
    groupBy(id, data)));
    margin = {
      top: 5,
      right: 10,
      bottom: 30,
      left: 40
    };
    width = width - margin.left - margin.right;
    height = height - margin.top - margin.bottom;
    $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.bottom + margin.top);
    x$ = x = d3.scale.ordinal();
    x$.domain(!!xExtents
      ? (function(){
        var i$, to$, results$ = [];
        for (i$ = xExtents[0], to$ = xExtents[1]; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }())
      : map(function(it){
        return it.key;
      }, dgroups)).rangeRoundBands([0, width], 0.1);
    y = d3.scale.linear().domain([
      0, d3.max(map(function(it){
        return it.prob;
      }, dgroups))
    ]).range([height, 0]);
    nextY = function(){
      var xs;
      xs = {};
      return function(key){
        return xs[key] = (xs[key] || 0) + 1;
      };
    }();
    data = map(function(it){
      var yCount, yValue;
      yCount = nextY(it);
      yValue = y(yCount / dlength);
      return {
        key: it,
        x: x(it),
        yCount: yCount,
        y: yValue
      };
    }, data);
    $vp = $svg.selectAll('g.vp').data([data]);
    $vpEnter = $vp.enter().append('g').attr('class', 'vp');
    $vp.attr('transform', "translate(" + margin.left + "," + margin.top + " )");
    blockHeight = ceil(height / function(){
      return d3.max(map(function(it){
        return it.yCount;
      }).apply(this, arguments));
    }(data));
    duration = duration / data.length;
    y$ = $block = $vp.selectAll('rect.block').data(id);
    y$.enter().append('rect').attr('class', 'block');
    y$.exit().remove();
    y$.attr('width', x.rangeBand()).attr('height', blockHeight);
    y$.attr('x', function(it){
      return it.x;
    }).attr('y', -2 * (blockHeight + margin.top));
    y$.transition().delay(function(_, i){
      return i * duration;
    }).duration(duration).attr('y', function(it){
      return it.y;
    }).each('start', onTransitionStarted).each('end', onTransitionEnded);
    $vpEnter.append('g').attr('class', 'y axis');
    yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(function(){
      return d3.format(",")((function(it){
        return it * dlength;
      }).apply(this, arguments));
    }).tickSize(-width, 0, 0).ticks(5);
    z$ = $yAxis = $vp.select('.y.axis');
    z$.transition().duration(200).call(yAxis);
    $vpEnter.append('g').attr('class', 'x axis');
    xAxis = d3.svg.axis().scale(x).orient('bottom');
    z1$ = $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
    z1$.transition().duration(200).call(xAxis);
    z1$.selectAll('text').text(id);
    return dgroups;
  };
  drawHistogramAxes = function($svg, data, arg$){
    var format, ref$, xdomainf, ydomainf, duration, width, height, drawPercentageAxis, zoomable, margin, xs, minXs, maxXs, rangeXsF, rangeXs, x, x$, xXAxis, y$, y, z$, $vp, z1$, yAxis, z2$, $yAxis, bins, xAxis, z3$, $xAxis, xpAxis, z4$, $xpAxis;
    format = (ref$ = arg$.format) != null
      ? ref$
      : d3.format(","), xdomainf = (ref$ = arg$.xdomainf) != null
      ? ref$
      : map(function(it){
        return it.x;
      }), ydomainf = (ref$ = arg$.ydomainf) != null
      ? ref$
      : function(it){
        return [
          0, d3.max(map(function(it){
            return it.y;
          }, it))
        ];
      }, duration = (ref$ = arg$.duration) != null ? ref$ : 1000, width = (ref$ = arg$.width) != null ? ref$ : 600, height = (ref$ = arg$.height) != null ? ref$ : 260, drawPercentageAxis = (ref$ = arg$.drawPercentageAxis) != null ? ref$ : false, zoomable = (ref$ = arg$.zoomable) != null ? ref$ : false;
    margin = {
      top: 5,
      right: 10,
      bottom: drawPercentageAxis ? 60 : 30,
      left: 40
    };
    width = width - margin.left - margin.right;
    height = height - margin.top - margin.bottom;
    $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.bottom + margin.top);
    if (zoomable) {
      xs = xdomainf(data);
      minXs = minimum(xs);
      maxXs = maximum(xs);
      rangeXsF = function(x){
        return (width / (maxXs - minXs)) * (x - minXs);
      };
      rangeXs = map(rangeXsF, xs);
      x = d3.scale.ordinal().domain(xs).range(rangeXs);
      x.rangeBand = function(){
        return width / rangeXs.length;
      };
      x$ = xXAxis = d3.scale.ordinal();
      x$.domain(sort(xs)).rangeBands([0, width], 0.1, 0);
    } else {
      y$ = x = d3.scale.ordinal();
      y$.domain(xdomainf(data)).rangeBands([0, width], 0.1, 0);
      xXAxis = x;
    }
    y = d3.scale.linear().domain(ydomainf(data)).range([height, 0]);
    z$ = $vp = $svg.selectAll('g.vp').data([data]);
    z1$ = z$.enter().append('g').attr('class', 'vp');
    z1$.append('g').attr('class', 'y axis');
    z1$.append('g').attr('class', 'x axis');
    z1$.append('g').attr('class', 'xp axis');
    z$.attr('transform', "translate(" + margin.left + "," + margin.top + " )");
    yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(format).tickSize(-width, 0, 0).ticks(5);
    z2$ = $yAxis = $vp.select('.y.axis');
    z2$.transition().duration(200).call(yAxis);
    bins = x.domain().length;
    xAxis = d3.svg.axis().scale(xXAxis).orient('bottom');
    z3$ = $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
    z3$.transition().duration(200).call(xAxis);
    z3$.selectAll('text').text(function(v, i){
      if (i % ceil(bins / 20) === 0) {
        return v;
      } else {
        return '';
      }
    });
    if (drawPercentageAxis) {
      xpAxis = d3.svg.axis().scale(x).orient('bottom');
      z4$ = $xpAxis = $svg.select('.xp.axis').attr("transform", "translate(0," + (height + 25) + ")");
      z4$.transition().duration(200).call(xpAxis);
      z4$.selectAll('text').text(function(v, i){
        if (i % ceil(bins / 20) === 0) {
          return d3.format('0.2p')(v / bins);
        } else {
          return '';
        }
      });
    }
    return {
      $vp: $vp,
      x: x,
      y: y,
      width: width,
      height: height
    };
  };
  drawHistogram = function($svg, data, arg$){
    var format, ref$, xdomainf, ydomainf, duration, width, height, drawPercentageAxis, mean, standardDeviation, zoomable, $vp, x, y, x$, $block, y$, z$, z1$, expectedValue, n, ldata, xl, line, z2$;
    format = (ref$ = arg$.format) != null
      ? ref$
      : d3.format(","), xdomainf = (ref$ = arg$.xdomainf) != null
      ? ref$
      : function(it){
        return map(function(it){
          return it.x;
        }, it);
      }, ydomainf = (ref$ = arg$.ydomainf) != null
      ? ref$
      : function(it){
        return [
          0, d3.max(map(function(it){
            return it.y;
          }, it))
        ];
      }, duration = (ref$ = arg$.duration) != null ? ref$ : 1000, width = (ref$ = arg$.width) != null ? ref$ : 600, height = (ref$ = arg$.height) != null ? ref$ : 260, drawPercentageAxis = (ref$ = arg$.drawPercentageAxis) != null ? ref$ : false, mean = (ref$ = arg$.mean) != null ? ref$ : null, standardDeviation = (ref$ = arg$.standardDeviation) != null ? ref$ : null, zoomable = (ref$ = arg$.zoomable) != null ? ref$ : false;
    ref$ = drawHistogramAxes($svg, data, {
      format: format,
      xdomainf: xdomainf,
      ydomainf: ydomainf,
      duration: duration,
      width: width,
      height: height,
      drawPercentageAxis: drawPercentageAxis,
      zoomable: zoomable
    }), $vp = ref$.$vp, x = ref$.x, y = ref$.y, width = ref$.width, height = ref$.height;
    x$ = $block = $vp.selectAll('rect.block').data(id);
    y$ = x$.enter().append('rect').attr('class', 'block');
    y$.attr('height', 0);
    y$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(){
      return y(0);
    });
    z$ = x$.exit().transition().duration(duration);
    z$.attr('height', 0);
    z$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(){
      return y(0);
    });
    z$.remove();
    z1$ = x$.transition().duration(duration);
    z1$.attr('width', x.rangeBand()).attr('height', function(){
      return (function(it){
        return height - it;
      })(y(function(it){
        return it.y;
      }.apply(this, arguments)));
    });
    z1$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(it){
      return y(it.y);
    });
    if (false) {
      expectedValue = function(){
        return sum(map(function(arg$){
          var x, y;
          x = arg$.x, y = arg$.y;
          return x * y;
        }).apply(this, arguments));
      }(
      data);
      n = function(){
        return maximum(map(function(arg$){
          var x, _;
          x = arg$.x, _ = arg$._;
          return x;
        }).apply(this, arguments));
      }(
      data);
      ldata = map(function(arg$){
        var x, y;
        x = arg$[0], y = arg$[1];
        return {
          x: x,
          y: y
        };
      })(
      zipAll((function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = n; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }()), binomialNormalApproximation(n, expectedValue / n)));
      xl = d3.scale.linear().domain(d3.extent(xdomainf(data))).range([0, width]);
      line = d3.svg.line().x(function(){
        return xl(function(it){
          return it.x;
        }.apply(this, arguments));
      }).y(function(){
        return y(function(it){
          return it.y;
        }.apply(this, arguments));
      }).interpolate('basis');
      z2$ = $vp.selectAll('path.line').data([ldata]);
      z2$.enter().append('path').attr('class', 'line');
      z2$.attr('d', line).style('fill', 'none').style('stroke', 'black').style('stroke-width', 2);
    }
    return {
      $vp: $vp,
      $block: $block,
      x: x,
      y: y
    };
  };
  drawPathDiagram = function($svg, data, arg$){
    var format, ref$, xdomainf, ydomainf, duration, width, height, $vp, x, y, xl, line, x$;
    format = (ref$ = arg$.format) != null
      ? ref$
      : d3.format(","), xdomainf = (ref$ = arg$.xdomainf) != null
      ? ref$
      : function(it){
        return map(function(it){
          return it.x;
        }, it);
      }, ydomainf = (ref$ = arg$.ydomainf) != null
      ? ref$
      : function(it){
        return [
          0, d3.max(map(function(it){
            return it.y;
          }, it))
        ];
      }, duration = (ref$ = arg$.duration) != null ? ref$ : 1000, width = (ref$ = arg$.width) != null ? ref$ : 600, height = (ref$ = arg$.height) != null ? ref$ : 260;
    ref$ = drawHistogramAxes($svg, data, {
      format: format,
      xdomainf: xdomainf,
      ydomainf: ydomainf,
      duration: duration,
      width: width,
      height: height
    }), $vp = ref$.$vp, x = ref$.x, y = ref$.y, width = ref$.width, height = ref$.height;
    xl = d3.scale.linear().domain(d3.extent(xdomainf(data))).range([0, width]);
    line = d3.svg.line().x(function(){
      return xl(function(it){
        return it.x;
      }.apply(this, arguments));
    }).y(function(){
      return y(function(it){
        return it.y;
      }.apply(this, arguments));
    }).interpolate('basis');
    x$ = $vp.selectAll('path.line').data([data]);
    x$.enter().append('path').attr('class', 'line');
    x$.attr('d', line).style('fill', 'none').style('stroke', 'black').style('stroke-width', 2);
    return {
      $vp: $vp,
      x: x,
      y: y
    };
  };
  drawDoubleHistogram = function($svg, arg$, arg1$){
    var data1, data2, format, ref$, xdomainf, ydomainf, duration, width, height, range, data, dataDff, $vp, x, y, x$, $block, y$, z$, z1$, z2$;
    data1 = arg$[0], data2 = arg$[1];
    format = (ref$ = arg1$.format) != null
      ? ref$
      : d3.format(","), xdomainf = (ref$ = arg1$.xdomainf) != null
      ? ref$
      : function(it){
        return map(function(it){
          return it.x;
        }, it);
      }, ydomainf = (ref$ = arg1$.ydomainf) != null
      ? ref$
      : function(it){
        return [
          0, d3.max(map(function(it){
            return it.y;
          }, it))
        ];
      }, duration = (ref$ = arg1$.duration) != null ? ref$ : 1000, width = (ref$ = arg1$.width) != null ? ref$ : 600, height = (ref$ = arg1$.height) != null ? ref$ : 260;
    range = function(arg$){
      var s, f, i$, results$ = [];
      s = arg$[0], f = arg$[1];
      for (i$ = s; i$ <= f; ++i$) {
        results$.push(i$);
      }
      return results$;
    };
    data = map(function(x){
      return {
        x: x,
        y: function(){
          return maximum(map(function(it){
            return it.y;
          })(filter(function(it){
            return it.x === x;
          }).apply(this, arguments)));
        }(data1.concat(data2))
      };
    })(
    range(
    d3.extent(map(function(it){
      return it.x;
    }, data1.concat(data2)))));
    dataDff = map(function(x){
      return {
        x: x,
        y: function(){
          return minimum(map(function(it){
            return it.y;
          })(filter(function(it){
            return it.x === x;
          }).apply(this, arguments)));
        }(data1.concat(data2))
      };
    })(
    range(
    d3.extent(map(function(it){
      return it.x;
    }, data1.concat(data2)))));
    ref$ = drawHistogramAxes($svg, data, {
      format: format,
      xdomainf: xdomainf,
      ydomainf: ydomainf,
      duration: duration,
      width: width,
      height: height
    }), $vp = ref$.$vp, x = ref$.x, y = ref$.y, width = ref$.width, height = ref$.height;
    x$ = $block = $vp.selectAll('g.data').data([data1, data2, dataDff]);
    x$.enter().append('g').attr('class', function(_, i){
      return 'data data-' + i;
    });
    y$ = x$.selectAll('rect.block').data(id);
    z$ = y$.enter().append('rect').attr('class', 'block');
    z$.attr('height', 0);
    z$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(){
      return y(0);
    });
    z1$ = y$.exit().transition().duration(duration);
    z1$.attr('height', 0);
    z1$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(){
      return y(0);
    });
    z1$.remove();
    z2$ = y$.transition().duration(duration);
    z2$.attr('width', x.rangeBand()).attr('height', function(){
      return (function(it){
        return height - it;
      })(y(function(it){
        return it.y;
      }.apply(this, arguments)));
    });
    z2$.attr('x', function(){
      return x(function(it){
        return it.x;
      }.apply(this, arguments));
    }).attr('y', function(it){
      return y(it.y);
    });
    return x$;
  };
  exports.drawHistogram = drawHistogram;
  exports.drawExperimentNTries = drawExperimentNTries;
  exports.drawDoubleHistogram = drawDoubleHistogram;
  exports.drawPathDiagram = drawPathDiagram;
}).call(this);
